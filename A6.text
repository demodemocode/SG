package os;

import java.util.Arrays;
import java.util.Scanner;

public class Assignment6 {
    // Method to allocate memory to blocks as per First fit algorithm
    static void firstFit(int blockSize[], int m, int processSize[], int n) {
        int allocation[] = new int[n]; // Stores block id of the block allocated to a process
        Arrays.fill(allocation, -1); // Initially no block is assigned to any process
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (blockSize[j] >= processSize[i]) {
                    allocation[i] = j; // allocate block j to process i
                    blockSize[j] -= processSize[i]; // Reduce available memory in this block.
                    break;
                }
            }
        }
        System.out.println("\nProcess No.\tProcess Size\tBlock no.");
        for (int i = 0; i < n; i++) {
            System.out.print(" " + (i + 1) + "\t\t" + processSize[i] + "\t\t");
            if (allocation[i] != -1)
                System.out.print(allocation[i] + 1);
            else
                System.out.print("Not Allocated");
            System.out.println();
        }
    }

    // Method to allocate memory to blocks as per Best fit algorithm
    static void bestFit(int blockSize[], int m, int processSize[], int n) {
        int allocation[] = new int[n]; // Stores block id of the block allocated to a process
        Arrays.fill(allocation, -1); // Initially no block is assigned to any process
        for (int i = 0; i < n; i++) {
            int bestIdx = -1; // Find the best fit block for current process
            for (int j = 0; j < m; j++) {
                if (blockSize[j] >= processSize[i]) {
                    if (bestIdx == -1 || blockSize[bestIdx] > blockSize[j])
                        bestIdx = j;
                }
            }
            if (bestIdx != -1) {
                allocation[i] = bestIdx; // allocate block to process
                blockSize[bestIdx] -= processSize[i]; // Reduce available memory in this block.
            }
        }
        System.out.println("\nProcess No.\tProcess Size\tBlock no.");
        for (int i = 0; i < n; i++) {
            System.out.print(" " + (i + 1) + "\t\t" + processSize[i] + "\t\t");
            if (allocation[i] != -1)
                System.out.print(allocation[i] + 1);
            else
                System.out.print("Not Allocated");
            System.out.println();
        }
    }

    // Method to allocate memory to blocks as per Worst fit algorithm
    static void worstFit(int blockSize[], int m, int processSize[], int n) {
        int allocation[] = new int[n]; // Stores block id of the block allocated to a process
        Arrays.fill(allocation, -1); // Initially no block is assigned to any process
        for (int i = 0; i < n; i++) {
            int wstIdx = -1; // Find the worst fit block for current process
            for (int j = 0; j < m; j++) {
                if (blockSize[j] >= processSize[i]) {
                    if (wstIdx == -1 || blockSize[wstIdx] < blockSize[j])
                        wstIdx = j;
                }
            }
            if (wstIdx != -1) {
                allocation[i] = wstIdx; // allocate block to process
                blockSize[wstIdx] -= processSize[i]; // Reduce available memory in this block.
            }
        }
        System.out.println("\nProcess No.\tProcess Size\tBlock no.");
        for (int i = 0; i < n; i++) {
            System.out.print(" " + (i + 1) + "\t\t" + processSize[i] + "\t\t");
            if (allocation[i] != -1)
                System.out.print(allocation[i] + 1);
            else
                System.out.print("Not Allocated");
            System.out.println();
        }
    }

    // Method to allocate memory to blocks as per Next fit algorithm
    static void nextFit(int blockSize[], int m, int processSize[], int n) {
        int allocation[] = new int[n]; // Stores block id of the block allocated to a process
        Arrays.fill(allocation, -1); // Initially no block is assigned to any process
        int j = 0;
        for (int i = 0; i < n; i++) {
            int count = 0;
            while (count < m) {
                count++;
                if (blockSize[j] >= processSize[i]) {
                    allocation[i] = j; // allocate block to process
                    blockSize[j] -= processSize[i]; // Reduce available memory in this block.
                    break;
                }
                j = (j + 1) % m;
                
            }
        }
        System.out.println("\nProcess No.\tProcess Size\tBlock no.\n");
        for (int i = 0; i < n; i++) {
            System.out.print(i + 1 + "\t\t" + processSize[i] + "\t\t");
            if (allocation[i] != -1) {
                System.out.print(allocation[i] + 1);
            } else {
                System.out.print("Not Allocated");
            }
            System.out.println("");
        }
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        while (true) {
            int choice;
            System.out.println();
            System.out.println("Enter the number of Blocks: ");
            int m = scan.nextInt();
            System.out.println("Enter the number of Processes: ");
            int n = scan.nextInt();
            int blockSize[] = new int[m];
            int processSize[] = new int[n];
            System.out.println("Enter the Size of all the blocks: ");
            for (int i = 0; i < m; i++) {
                blockSize[i] = scan.nextInt();
            }
            System.out.println("Enter the size of all processes: ");
            for (int i = 0; i < n; i++) {
                processSize[i] = scan.nextInt();
            }
            System.out.println();
            System.out.println("Menu");
            System.out.println("1. First Fit ");
            System.out.println("2. Next Fit");
            System.out.println("3. Worst Fit");
            System.out.println("4. Best Fit");
            System.out.println("5. exit");
            System.out.println("Select the algorithm you want to implement: ");
            choice = scan.nextInt();
            switch (choice) {
                case 1:
                    System.out.println("First Fit Output");
                    firstFit(blockSize, m, processSize, n);
                    break;
                case 2:
                    System.out.println("Next Fit Output");
                    nextFit(blockSize, m, processSize, n);
                    break;
                case 3:
                    System.out.println("Worst Fit Output");
                    worstFit(blockSize, m, processSize, n);
                    break;
                case 4:
                    System.out.println("Best Fit Output");
                    bestFit(blockSize, m, processSize, n);
                    break;
                case 5:
                    System.out.println("Exiting the code...");
                    return;
                default:
                    System.out.println("Invalid option");
            }
        }
    }
}
