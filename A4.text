package os;

import java.util.Scanner;

import os.Assignmet2_4.Process;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
public class Main {
private static final int NUM_READERS = 2;
private static final int NUM_WRITERS = 2;
private static Lock lock = new ReentrantLock();
private static Condition readerCondition = lock.newCondition();
private static Condition writerCondition = lock.newCondition();
private static int readersCount = 0;
private static int writersCount = 0;
private static int resource = 0;
private static boolean synchronizedFlag = true;
public static void main(String[] args) {
// Reader-Reader (RR) case
synchronizedFlag = true;
System.out.println("Reader1-Reader2 synchronisation case:");
createReadersAndJoin();
// Reader-Writer (RW) case
synchronizedFlag = true;
System.out.println("\nReader1-Writer1 synchronisation case:");
createReaderWriterAndJoin();
// Writer-Writer (WW) case
synchronizedFlag = true;
System.out.println("\nWriter1-Writer2 synchronisation case:");
createWritersAndJoin();
// Writer-Reader (WR) case
synchronizedFlag = true;
System.out.println("\nWriter1-Reader1 synchronisation case:");
createWriterReaderAndJoin();
// Reader-Reader (RR) case without synchronization
synchronizedFlag = false;
System.out.println("\nReader1-Reader2 case without synchronization:");
createReadersAndJoin();
// Reader-Writer (RW) case without synchronization
synchronizedFlag = false;
System.out.println("\nReader1-Writer1 case without synchronization:");

createReaderWriterAndJoin();
// Writer-Writer (WW) case without synchronization
synchronizedFlag = false;
System.out.println("\nWriter1-Writer2 case without synchronization:");
createWritersAndJoin();
// Writer-Reader (WR) case without synchronization
synchronizedFlag = false;
System.out.println("\nWriter1-Reader1 case without synchronization:");
createWriterReaderAndJoin();
}
private static void createReadersAndJoin() {
for (int i = 0; i < NUM_READERS; i++) {
final int readerId = i + 1;
new Thread(() -> reader(readerId)).start();
}
joinThreads(NUM_READERS);
}
private static void createReaderWriterAndJoin() {
Thread readerThread = new Thread(() -> reader(1));
Thread writerThread = new Thread(() -> writer(1));
readerThread.start();
writerThread.start();
joinThreads(2);
}
private static void createWritersAndJoin() {
for (int i = 0; i < NUM_WRITERS; i++) {
final int writerId = i + 1;
new Thread(() -> writer(writerId)).start();
}
joinThreads(NUM_WRITERS);
}
private static void createWriterReaderAndJoin() {
Thread writerThread = new Thread(() -> writer(1));
Thread readerThread = new Thread(() -> reader(1));
writerThread.start();
readerThread.start();
joinThreads(2);
}

private static void reader(int readerId) {
if (synchronizedFlag) {
lock.lock();
try {
while (writersCount > 0) {
System.out.println("Reader " + readerId + " is waiting because a writer is writing");
readerCondition.await();
}
readersCount++;
} catch (InterruptedException e) {
e.printStackTrace();
} finally {
lock.unlock();
}
// Read the resource
System.out.println("Reader " + readerId + " reads from the shared resource");
try {
Thread.sleep(1000);
} catch (InterruptedException e) {
e.printStackTrace();
}
lock.lock();
try {
readersCount--;
if (readersCount == 0) {
writerCondition.signal();
}
} finally {
lock.unlock();
}
} else {
// Without synchronization
// Read the resource
System.out.println("Reader " + readerId + " reads from the resource: " + resource);
try {
Thread.sleep(1000);
} catch (InterruptedException e) {
e.printStackTrace();
}
}
System.out.println("Reader " + readerId + " completed reading, critical section is free");
}

private static void writer(int writerId) {
if (synchronizedFlag) {
lock.lock();
try {
writersCount++;
while (readersCount > 0 || writersCount > 1) {
System.out.println("Writer " + writerId + " is waiting to write");
writerCondition.await();
}
// Write to the resource
resource = writerId;
} catch (InterruptedException e) {
e.printStackTrace();
} finally {
lock.unlock();
}
System.out.println("Writer " + writerId + " writes to the shared resource");
try {
Thread.sleep(1000);
} catch (InterruptedException e) {
e.printStackTrace();
}
lock.lock();
try {
writersCount--;
writerCondition.signal();
readerCondition.signalAll(); // Signal all readers
} finally {
lock.unlock();
}
} else {
// Without synchronization
// Write to the resource
resource = writerId;
System.out.println("Writer " + writerId + " writes to the resource: " + resource);
try {
Thread.sleep(1000);
} catch (InterruptedException e) {
e.printStackTrace();
}
}
System.out.println("Writer " + writerId + " completed writing, critical section is free");
}

private static void joinThreads(int numThreads) {
for (int i = 0; i < numThreads; i++) {
try {
Thread.sleep(1000);
} catch (InterruptedException e) {
e.printStackTrace();
}
}
}
}