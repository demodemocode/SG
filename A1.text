#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
int main() {
pid_t child_pid;
// Fork a child process
child_pid = fork();
if (child_pid < 0) {
perror("Fork failed");
exit(EXIT_FAILURE);
}
if (child_pid == 0) {
// This code is executed by the child process
printf("Child process (PID: %d) executing...\n", getpid());
// Simulate running a Linux command using execvp
char *command = "ls";
char *args[] = {"ls", "-l", NULL};
execvp(command, args);
// If execvp fails
perror("Exec failed");
exit(EXIT_FAILURE);
} else {
// This code is executed by the parent process
// Wait for the child process to finish
wait(NULL);
printf("Parent process (PID: %d) exiting...\n", getpid());
exit(EXIT_SUCCESS);
}
return 0;
}